AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  EnvType:
    Description: Environment type.
    Default: dev
    Type: String
    AllowedValues:
      - prod
      - dev
      - test
    ConstraintDescription: must specify prod, dev, or test.
Mappings:
    ImageIds:
        us-east-1:
            t2micro: ami-0a3c3a20c09d6f377
            
Resources:
  SampleBacketVor:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    
  
  ResourceLambda:
    Type: AWS::Lambda::Function
    Properties:
        Runtime: python3.12
        Role: !GetAtt AWSLambdaExecutionRole.Arn
        Handler: index.handler
        FunctionName: !Sub 'DemoLambda-${AWS::Region}-lambda'
        Code:
         ZipFile: |
          import boto3
          import cfnresponse
          ### cfnresponse module help in sending responses to CloudFormation
          ### instead of writing your own code

          def handler(event, context):
              # Get request type
              the_event = event['RequestType']        
              print("The event is: ", str(the_event))

              response_data = {}
              s3 = boto3.client('s3')

              # Retrieve parameters (bucket name)
              bucket_name = event['ResourceProperties']['bucket_name']
              
              try:
                  if the_event == 'Delete':
                      print("Deleting S3 content...")
                      b_operator = boto3.resource('s3')
                      b_operator.Bucket(str(bucket_name)).objects.all().delete()

                  # Everything OK... send the signal back
                  print("Execution succesfull!")
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              except Exception as e:
                  print("Execution failed...")
                  print(str(e))
                  response_data['Data'] = str(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
        
  MyCustomResourceUsingLambda:
    Type: Custom::MyLambdaResource
    Properties:
        ServiceToken: !GetAtt ResourceLambda.Arn
        bucket_name: !Ref SampleBacketVor
        
  AWSLambdaExecutionRole:
     Type: AWS::IAM::Role
     Properties:
       AssumeRolePolicyDocument:
         Statement:
         - Action:
           - sts:AssumeRole
           Effect: Allow
           Principal:
             Service:
             - lambda.amazonaws.com
         Version: '2012-10-17'
       Path: "/"
       Policies:
       - PolicyDocument:
           Statement:
           - Action:
             - logs:CreateLogGroup
             - logs:CreateLogStream
             - logs:PutLogEvents
             Effect: Allow
             Resource: arn:aws:logs:*:*:*
           Version: '2012-10-17'
         PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambda-CW
       - PolicyDocument:
           Statement:
           - Action:
             - s3:PutObject
             - s3:DeleteObject
             - s3:List*
             Effect: Allow
             Resource:
             - !Sub arn:aws:s3:::${SampleBacketVor}
             - !Sub arn:aws:s3:::${SampleBacketVor}/*
           Version: '2012-10-17'
         PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambda-S3
       RoleName: !Sub Demo-Lambda-${AWS::Region}-role
